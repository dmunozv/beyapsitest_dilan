//------------------------------------------------------------------------------
// <auto-generated>
//     Este código se generó a partir de una plantilla.
//
//     Los cambios manuales en este archivo pueden causar un comportamiento inesperado de la aplicación.
//     Los cambios manuales en este archivo se sobrescribirán si se regenera el código.
// </auto-generated>
//------------------------------------------------------------------------------

namespace ServicioCajaPopular.Modelo
{
    using System;
    using System.Data.Entity;
    using System.Data.Entity.Infrastructure;
    using System.Data.Entity.Core.Objects;
    using System.Linq;
    
    public partial class CAJAPOPULARHIDALGOEntities : DbContext
    {
        public CAJAPOPULARHIDALGOEntities()
            : base("name=CAJAPOPULARHIDALGOEntities")
        {
        }
    
        protected override void OnModelCreating(DbModelBuilder modelBuilder)
        {
            throw new UnintentionalCodeFirstException();
        }
    
        public virtual DbSet<Cliente> Clientes { get; set; }
        public virtual DbSet<ControlCliente> ControlClientes { get; set; }
        public virtual DbSet<Movimiento> Movimientos { get; set; }
    
        public virtual int SP_EditarCliente(Nullable<int> idCliente, string nombre, string apellido, Nullable<System.DateTime> fechaNacimiento, string correo, Nullable<decimal> telefono, Nullable<System.DateTime> fechaActual, Nullable<double> monto, ObjectParameter mensaje)
        {
            var idClienteParameter = idCliente.HasValue ?
                new ObjectParameter("IdCliente", idCliente) :
                new ObjectParameter("IdCliente", typeof(int));
    
            var nombreParameter = nombre != null ?
                new ObjectParameter("Nombre", nombre) :
                new ObjectParameter("Nombre", typeof(string));
    
            var apellidoParameter = apellido != null ?
                new ObjectParameter("Apellido", apellido) :
                new ObjectParameter("Apellido", typeof(string));
    
            var fechaNacimientoParameter = fechaNacimiento.HasValue ?
                new ObjectParameter("FechaNacimiento", fechaNacimiento) :
                new ObjectParameter("FechaNacimiento", typeof(System.DateTime));
    
            var correoParameter = correo != null ?
                new ObjectParameter("Correo", correo) :
                new ObjectParameter("Correo", typeof(string));
    
            var telefonoParameter = telefono.HasValue ?
                new ObjectParameter("Telefono", telefono) :
                new ObjectParameter("Telefono", typeof(decimal));
    
            var fechaActualParameter = fechaActual.HasValue ?
                new ObjectParameter("FechaActual", fechaActual) :
                new ObjectParameter("FechaActual", typeof(System.DateTime));
    
            var montoParameter = monto.HasValue ?
                new ObjectParameter("Monto", monto) :
                new ObjectParameter("Monto", typeof(double));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("SP_EditarCliente", idClienteParameter, nombreParameter, apellidoParameter, fechaNacimientoParameter, correoParameter, telefonoParameter, fechaActualParameter, montoParameter, mensaje);
        }
    
        public virtual int SP_EliminarCliente(Nullable<int> idCliente, string mensaje)
        {
            var idClienteParameter = idCliente.HasValue ?
                new ObjectParameter("IdCliente", idCliente) :
                new ObjectParameter("IdCliente", typeof(int));
    
            var mensajeParameter = mensaje != null ?
                new ObjectParameter("Mensaje", mensaje) :
                new ObjectParameter("Mensaje", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("SP_EliminarCliente", idClienteParameter, mensajeParameter);
        }
    
        public virtual int SP_RegistrarCliente(string nombre, string apellido, Nullable<System.DateTime> fechaNacimiento, string correo, Nullable<decimal> telefono, Nullable<System.DateTime> fechaActual, Nullable<double> monto, string mensaje)
        {
            var nombreParameter = nombre != null ?
                new ObjectParameter("Nombre", nombre) :
                new ObjectParameter("Nombre", typeof(string));
    
            var apellidoParameter = apellido != null ?
                new ObjectParameter("Apellido", apellido) :
                new ObjectParameter("Apellido", typeof(string));
    
            var fechaNacimientoParameter = fechaNacimiento.HasValue ?
                new ObjectParameter("FechaNacimiento", fechaNacimiento) :
                new ObjectParameter("FechaNacimiento", typeof(System.DateTime));
    
            var correoParameter = correo != null ?
                new ObjectParameter("Correo", correo) :
                new ObjectParameter("Correo", typeof(string));
    
            var telefonoParameter = telefono.HasValue ?
                new ObjectParameter("Telefono", telefono) :
                new ObjectParameter("Telefono", typeof(decimal));
    
            var fechaActualParameter = fechaActual.HasValue ?
                new ObjectParameter("FechaActual", fechaActual) :
                new ObjectParameter("FechaActual", typeof(System.DateTime));
    
            var montoParameter = monto.HasValue ?
                new ObjectParameter("Monto", monto) :
                new ObjectParameter("Monto", typeof(double));
    
            var mensajeParameter = mensaje != null ?
                new ObjectParameter("Mensaje", mensaje) :
                new ObjectParameter("Mensaje", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("SP_RegistrarCliente", nombreParameter, apellidoParameter, fechaNacimientoParameter, correoParameter, telefonoParameter, fechaActualParameter, montoParameter, mensajeParameter);
        }
    }
}
